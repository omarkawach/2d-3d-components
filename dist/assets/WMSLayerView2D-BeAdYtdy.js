import{a_ as S,P as R,cr as $,gJ as q,M as U,o as h,y as f,X as I}from"./index-8ERthB3p.js";import{a as w}from"./BitmapContainer-Cmneaqp9.js";import{m as E}from"./LayerView2D-BSaaWl8y.js";import{v as H}from"./ExportStrategy-D5tWx3Ul.js";import{u as W}from"./LayerView-DO6TerBv.js";import{i as A}from"./RefreshableLayerView-B0936Ssp.js";import{m as F}from"./WMSLayerView-Bcg33PdZ.js";import"./WGLContainer-DrWw77ek.js";import"./definitions-B54owTRu.js";import"./LabelMetric-B0IKUycz.js";import"./enums-DSseSvdG.js";import"./enums-BRqP_wXA.js";import"./Texture-O7Pyotwx.js";import"./Program-BB52p2Mx.js";import"./BufferObject-CaEbWulZ.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./BoundingBox-BhuXqU4L.js";import"./vec2f32-BbH2jxlN.js";import"./VertexArrayObject-Cv4RwmVi.js";import"./WGLBrushVTLSymbol-DSNnpuOI.js";import"./DefaultUI-DIlogOoy.js";import"./jsxFactory-BxQYPm-b.js";import"./UpdatingHandles-ugzlsvZF.js";import"./screenUtils-BuM_Fswi.js";import"./signal-DoM1gSF0.js";import"./GraphicsCollection-CKieR40M.js";import"./ReactiveMap-C-O0lKvJ.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./heightModelInfoUtils-CdtST1Ra.js";import"./ViewingMode-Dodu7ZZk.js";import"./Viewpoint-CB1GAuK3.js";import"./Cyclical-BY9qISY1.js";import"./mat2d-D9yIh3Tx.js";import"./mat2df32-orApM5a3.js";import"./mat2df64-CBKYtunK.js";import"./mat3-CqxUQBLP.js";import"./vec2-Dt9Foiri.js";import"./vec2f64-Diu2Kaa8.js";import"./normalizeUtils-Cm7zySIZ.js";import"./normalizeUtilsCommon-DRIluWnF.js";import"./utils-1zmckiYC.js";import"./utils-D-bI9C7C.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-DfZw-NIf.js";import"./accessibleHandler-DsewpcQ5.js";import"./Compass-C-feYp_a.js";import"./utils-DsJqvptN.js";import"./GoTo-BzS22eXk.js";import"./NavigationToggle-QjJqvxo5.js";import"./Zoom-Ct1er6X1.js";import"./vec4f32-CjrfB-0a.js";import"./StyleDefinition-pu9RBNlY.js";import"./config-MDUrh2eL.js";import"./ShaderCompiler-G2XYGDs6.js";import"./ProgramTemplate-BlB59bbU.js";import"./DefaultVertexAttributeLayouts-Co_GH1pH.js";import"./DisplayObject-B9oc5ibO.js";import"./TileKey-Drwp1tmy.js";import"./Container-lXzdRU2v.js";import"./EffectView-C6VBe3AA.js";import"./highlightReasons-LsVPCozu.js";import"./Tile-BZM3wEBG.js";import"./quickselect-D0_cvEX6.js";import"./earcut-BqgeR2O3.js";import"./featureConversionUtils-BzfH5fda.js";import"./OptimizedFeature-CXeSoBCN.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./OptimizedGeometry-DLPswkPy.js";import"./scaleUtils-0K_Ry6I1.js";import"./ClipRect-tFFfZq22.js";import"./TileInfo-BsGWbS2H.js";import"./TileKey-DZd6gJy7.js";import"./Bitmap-B3-IcBfD.js";import"./TileStrategy-BMTAwxMt.js";import"./QueueProcessor-DFkcFyJt.js";import"./ExportWMSImageParameters-CqkZXSd_.js";let m=class extends F(A(E(W))){constructor(){super(...arguments),this.bitmapContainer=new w}supportsSpatialReference(t){return this.layer.serviceSupportsSpatialReference(t)}update(t){this.strategy.update(t).catch(i=>{S(i)||R.getLogger(this).error(i)})}attach(){const{layer:t}=this,{imageMaxHeight:i,imageMaxWidth:e}=t;this.bitmapContainer=new w,this.container.addChild(this.bitmapContainer),this.strategy=new H({container:this.bitmapContainer,fetchSource:this.fetchImage.bind(this),requestUpdate:this.requestUpdate.bind(this),imageMaxHeight:i,imageMaxWidth:e,imageRotationSupported:!1,imageNormalizationSupported:!1,hidpi:!1}),this.addAttachHandles($(()=>this.exportImageVersion,()=>this.requestUpdate()))}detach(){this.strategy=q(this.strategy),this.container.removeAllChildren()}moveStart(){}viewChange(){}moveEnd(){this.requestUpdate()}createFetchPopupFeaturesQuery(t){const{view:i,bitmapContainer:e}=this,{x:o,y:p}=t,{spatialReference:v}=i;let r,a=0,d=0;if(e.children.some(M=>{const{width:c,height:g,resolution:y,x:s,y:n}=M,l=s+y*c,x=n-y*g;return o>=s&&o<=l&&p<=n&&p>=x&&(r=new U({xmin:s,ymin:x,xmax:l,ymax:n,spatialReference:v}),a=c,d=g,!0)}),!r)return null;const u=r.width/a,b=Math.round((o-r.xmin)/u),C=Math.round((r.ymax-p)/u);return{extent:r,width:a,height:d,x:b,y:C}}async doRefresh(){this.requestUpdate()}isUpdating(){return this.strategy.updating||this.updateRequested}fetchImage(t,i,e,o){return this.layer.fetchImageBitmap(t,i,e,{timeExtent:this.timeExtent,...o})}};h([f()],m.prototype,"strategy",void 0),h([f()],m.prototype,"updating",void 0),m=h([I("esri.views.2d.layers.WMSLayerView2D")],m);const pi=m;export{pi as default};
