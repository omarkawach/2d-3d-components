import{o as i,y as r,X as T,j6 as x,j5 as V,cr as y,gl as D,gJ as f,Z as A,a7 as S,fW as q,jp as R,e$ as N,j3 as z,jX as F,jW as X,e7 as j,an as J,dr as g,T as k,dS as Z,j7 as K,P as Q,j9 as b,f$ as Y,dq as ee,f_ as te}from"./index-8ERthB3p.js";import{e as U,O as ie,n as I,i as se}from"./jsxFactory-BxQYPm-b.js";import{e as re}from"./defaultUnit-gjMTMp_C.js";import{g as oe,d as ne,D as ae}from"./unitFormatUtils-3MMEFLJJ.js";import{geodesicLength as le,geodesicDensify as me,planarLength as he}from"./geometryEngine-MBwx6Ib1.js";import{w as P,v as M,R as L}from"./geodesicUtils-D1kRRrco.js";import B from"./GraphicsLayer-CapLCpoe.js";import{l as ce}from"./Draw-DIaSIzX8.js";import{l as pe,x as ue,j as de,S as ve}from"./InteractiveToolBase-yKkEJSmV.js";import{S as ye}from"./GraphicManipulator-XLxbfqMV.js";import{p as ge,u as we}from"./MeasurementWidgetContent-BBPWDwmp.js";import{e as G}from"./globalCss-DfZw-NIf.js";import"./getDefaultUnitForView-BEilgbp7.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./Cyclical-BY9qISY1.js";import"./quantityUtils-9zDVxeky.js";import"./geometryEngineBase-Cz__5BKm.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-7yclY7Co.js";import"./GraphicsCollection-CKieR40M.js";import"./projectVectorToVector-C3SBBDgz.js";import"./projectPointToVector-qKp-AJ2b.js";import"./ViewingMode-Dodu7ZZk.js";import"./SnappingVisualizer2D-C_lkvSQ4.js";import"./vec2-Dt9Foiri.js";import"./vec2f64-Diu2Kaa8.js";import"./enums-BRqP_wXA.js";import"./angularMeasurementUtils-CATp35qy.js";import"./plane-Du3EYICn.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-BrpT0VRp.js";import"./mathUtils-iSLnUy_4.js";import"./sphere-Bf4ezJdT.js";import"./ObjectStack-BPo9QGhV.js";import"./geometry2dUtils-DoOkpuKA.js";import"./screenUtils-BuM_Fswi.js";import"./signal-DoM1gSF0.js";import"./elevationInfoUtils-sHEwmo9N.js";import"./SnappingVisualizer-DfDIQ0EV.js";import"./PointSnappingHint-DFYGb6IS.js";import"./EditGeometryOperations-3XHFCAp6.js";import"./SnappingContext-Cpn1WUY8.js";import"./SnappingOperation-B1FLBSOP.js";import"./Scheduler-DaHJO6l7.js";import"./debugFlags-BbJIqrPU.js";import"./RenderState-DaVlEYWY.js";import"./surfaceCoordinateSystems-mGV_LGb6.js";import"./memoize-DsJmrG76.js";import"./UpdatingHandles-ugzlsvZF.js";import"./dehydratedFeatureComparison-DdCJ1gSj.js";import"./SketchLabelOptions-BnZB654u.js";import"./SnappingDragPipelineStep-selKU1rW.js";import"./hydratedFeatures-DqrDm0_F.js";import"./mat2d-D9yIh3Tx.js";import"./mat2df64-CBKYtunK.js";import"./quat-DUnoL8dP.js";import"./meshVertexSpaceUtils-KRc33Yrq.js";import"./MeshLocalVertexSpace-C8ABjEju.js";import"./vec3-DPXcG_yS.js";import"./interfaces-DkjgzG8v.js";import"./drawUtils-C6Di23Hl.js";import"./interfaces-D6pIddIh.js";import"./drapedUtils-BdDXXXz6.js";import"./UnitSelect-vwLT4dGV.js";const w=1e5;let p=class extends pe{constructor(e){super(e),this._drawActive=!1,this._measurementLayer=new B({internal:!0,listMode:"hide",visible:!1}),this._manipulatorLayer=new B({internal:!0,listMode:"hide",visible:!1}),this._vertices=[],this.geodesicDistanceThreshold=null,this.measurement=null,this.measurementLabel=null}initialize(){x("esri/core/t9n/Units").then(t=>{this.messages=t}),this.addHandles(V(async()=>{this.messages=await x("esri/core/t9n/Units")}));const e=this.view;this._draw=new ce({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer]),e.focus(),this.addHandles([y(()=>[this.unit,this.geodesicDistanceThreshold,this.messages],()=>{this._updatePolylines()},D),y(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const t=this._vertices.map(({coord:s})=>s);for(const{handle:s}of this._vertices)s.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(t)})])}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=f(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=f(this._measurementLayer),this._manipulatorLayer=f(this._manipulatorLayer),this._resetVertices()}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}onActivate(){this._drawActive||this._vertices.length!==0||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const e=this._draw.create("polyline",{mode:"click"});e.on(["vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],t=>this._updateSketch(t.vertices)),e.on("draw-complete",()=>{this._stopSketch()})}_stopSketch(){this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const{spatialReference:t}=this.view;for(;this._vertices.length>e.length;){const{handle:o,manipulator:c}=this._vertices.pop();o.remove(),this.manipulators.remove(c)}for(let o=this._vertices.length;o<e.length;o++){const[c,d]=e[o],v=_e(new A({x:c,y:d,spatialReference:t}),this.view,this._manipulatorLayer);this.manipulators.add(v);const _=ue(v,(O,H)=>{H.next(de(this.view)).next(ve(O.graphic)).next(()=>{const C=O.graphic.geometry;this._vertices[o].coord=[C.x,C.y],this._updatePolylines()})});this._vertices.push({manipulator:v,coord:[c,d],handle:_})}const s=this._vertices.length-1,n=this._vertices[s],[l,a]=e[s];n.coord[0]===l&&n.coord[1]===a||(n.coord=[l,a],n.manipulator.graphic.geometry=new A({x:l,y:a,spatialReference:t}));const m=this._drawActive?this._vertices[s].manipulator:null;this.manipulators.forEach(({manipulator:o})=>{o.interactive=m==null||o!==m}),this._updatePolylines()}_updatePolylines(){var v;if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=this._vertices.map(({coord:_})=>_),{measurement:t,drawing:s,original:n}=fe(e,this.view.spatialReference,this.geodesicDistanceThreshold);this._set("measurement",t);const l=Le(this.messages,t,this.unit);let a,m;this._set("measurementLabel",l);const{graphics:o}=this._measurementLayer,c=o.length===2,{effectiveTheme:d}=this.view;c?(a=o.at(0),m=o.at(1)):(a=new S({symbol:new q({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[14,12],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:3.5,color:R(d.accentColor).toArray()},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:5,color:d.accentColor.toArray()}]}}})}),m=new S({symbol:new N({color:d.textColor,haloColor:z(R(d.textColor,F.Low),.5),haloSize:2,font:new X({size:14,family:"sans-serif"})})}),o.removeAll(),o.addMany([a,m])),a.geometry=s,m.geometry=(v=n.extent)==null?void 0:v.center,m.symbol.text=l}};function _e(e,t,s){const n=z(t.effectiveTheme.accentColor,.5),l={type:"simple-line",width:0},a=8,m=new j({style:"circle",color:n,size:a,outline:l}),o=new j({style:"circle",color:n,size:1.5*a,outline:l}),c=new S({geometry:e,symbol:m});return new ye({view:t,layer:s,graphic:c,focusedSymbol:o})}function fe(e,t,s){const n=new J({paths:[e],spatialReference:t});let l,a;if(t.isGeographic)if(P(t))l=M([n],"meters")[0],a=L(n,w);else{const m=g(n,k.WGS84),o=L(m,w);l=M([m],"meters")[0],a=g(o,t)}else if(t.isWebMercator)l=le(n,"meters"),a=me(n,w,"meters");else{const m=he(n,"meters");if(s!=null&&m>=s){const o=g(n,k.WGS84),c=L(o,w);l=M([o],"meters")[0],a=g(c,t)}else l=m,a=n}return{measurement:{geometry:a,length:l},original:n,drawing:a}}function be(e){return e!=null}function Me(e){if(!e)return!1;const{isGeographic:t,isWebMercator:s,isWGS84:n}=e;return t&&!n&&!P(e)||!t&&!s}function Le(e,t,s){if(!t||!e)return"";switch(s){case"metric":return ae(e,t.length,"meters");case"imperial":return ne(e,t.length,"meters");default:return oe(e,Z(t.length,"meters",s),s)}}i([r()],p.prototype,"_drawActive",void 0),i([r({readOnly:!0})],p.prototype,"cursor",null),i([r({value:!0})],p.prototype,"editable",null),i([r({type:Number})],p.prototype,"geodesicDistanceThreshold",void 0),i([r({readOnly:!0})],p.prototype,"measurement",void 0),i([r({readOnly:!0})],p.prototype,"measurementLabel",void 0),i([r()],p.prototype,"messages",void 0),i([r()],p.prototype,"unit",void 0),i([r({constructOnly:!0})],p.prototype,"view",void 0),p=i([T("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")],p);let u=class extends ge{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="DistanceMeasurement2DViewModel is only supported in 2D views."}initialize(){this.addHandles([y(()=>{var e;return(e=this.view)==null?void 0:e.spatialReference},()=>this.clear()),y(()=>this.unit,e=>{this.tool!=null&&(this.tool.unit=e)},D),y(()=>this.geodesicDistanceThreshold,e=>{this.tool!=null&&(this.tool.geodesicDistanceThreshold=e)},D)])}get geodesicDistanceThreshold(){return this._get("geodesicDistanceThreshold")}set geodesicDistanceThreshold(e){K(Q.getLogger(this),"geodesicDistanceThreshold",{version:"4.29",warnOnce:!0}),this._set("geodesicDistanceThreshold",e)}get measurement(){return this.tool!=null?this.tool.measurement:null}get measurementLabel(){return this.tool!=null?this.tool.measurementLabel:null}get state(){var e;return this.disabled||this.view==null||!be((e=this.view)==null?void 0:e.spatialReference)?"disabled":this.tool!=null&&this.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return b}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;e!=null&&(await Y(()=>e.ready),Me(e.spatialReference)&&await ee()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new p({view:this.view,visible:this.visible,geodesicDistanceThreshold:this.geodesicDistanceThreshold,unit:this.unit})}_validateUnit(e){const{unitOptions:t,defaultUnit:s}=this;return e!=null&&t.includes(e)?e:t.includes(s)?s:t.length>0?t[0]:s}_validateUnits(e){if(e==null)return[];const t=e.filter(s=>b.includes(s));return t.length===0?b.slice():t}};i([r(re)],u.prototype,"defaultUnit",void 0),i([r()],u.prototype,"geodesicDistanceThreshold",null),i([r({readOnly:!0})],u.prototype,"measurement",null),i([r({readOnly:!0})],u.prototype,"measurementLabel",null),i([r({readOnly:!0})],u.prototype,"state",null),i([r({type:String})],u.prototype,"unit",null),i([r({type:[String]})],u.prototype,"unitOptions",null),u=i([T("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")],u);const E=u,W="esri-distance-measurement-2d",$={base:W,newMeasurementButton:`${W}__clear-button`,widgetIcon:se.measureLine};let h=class extends ie{constructor(e,t){super(e,t),this.iconClass=$.widgetIcon,this.icon=null,this.messages=null,this.messagesCommon=null,this.viewModel=new E}get active(){return this.viewModel.active}get label(){var e;return((e=this.messages)==null?void 0:e.widgetLabel)??""}set label(e){this._overrideIfSome("label",e)}get unit(){return this.viewModel.unit}set unit(e){this.viewModel.unit=e}get unitOptions(){return this.viewModel.unitOptions}set unitOptions(e){this.viewModel.unitOptions=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}get visible(){return this.viewModel.visible}set visible(e){this.viewModel.visible=e}render(){const{messages:e,messagesCommon:t,unit:s,unitOptions:n,viewModel:l}=this,{active:a,measurementLabel:m,state:o,supported:c}=l;return I("div",{"aria-label":this.messages.widgetLabel,class:this.classes($.base,G.widget,G.panel),key:this,role:"presentation"},this.visible?I(we,{active:a,measurementItems:[{key:"distance",title:e.distance,value:m}],messages:{...e,notApplicable:t.notApplicable},newMeasurementButtonClass:$.newMeasurementButton,state:o,supported:c,unit:s,unitOptions:n,onNewMeasurementClick:()=>{te(this.viewModel.start())},onUnitChange:d=>{this.unit=d}}):null)}};i([r({readOnly:!0})],h.prototype,"active",null),i([r()],h.prototype,"iconClass",void 0),i([r()],h.prototype,"icon",void 0),i([r()],h.prototype,"label",null),i([r()],h.prototype,"uiStrings",void 0),i([r(),U("esri/widgets/DistanceMeasurement2D/t9n/DistanceMeasurement2D")],h.prototype,"messages",void 0),i([r(),U("esri/t9n/common")],h.prototype,"messagesCommon",void 0),i([r()],h.prototype,"unit",null),i([r()],h.prototype,"unitOptions",null),i([r()],h.prototype,"view",null),i([r({type:E})],h.prototype,"viewModel",void 0),i([r({type:Boolean})],h.prototype,"visible",null),h=i([T("esri.widgets.DistanceMeasurement2D")],h);const Ut=h;export{Ut as default};
