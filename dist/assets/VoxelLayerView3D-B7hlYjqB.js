import{s as u,a1 as T,cr as l,gl as y,cK as x,T as E,eO as I,cg as A,bX as M,dg as L,P as w,o as b,y as S,X as D,bW as f}from"./index-8ERthB3p.js";import{n as P}from"./projectVectorToVector-C3SBBDgz.js";import{n as F}from"./LayerView3D-y7LfmsJ-.js";import{l as $,o,i as V}from"./EdgeShader.glsl-DNm98Ote.js";import{t as U}from"./WaterSurface.glsl-JBHYhfkH.js";import{i as R}from"./PopupSceneLayerView-DPpelsIn.js";import{u as C}from"./LayerView-DO6TerBv.js";import{t as z}from"./layerViewUtils-Bi2wmOiN.js";import"./projectPointToVector-qKp-AJ2b.js";import"./heightModelInfoUtils-CdtST1Ra.js";import"./Viewpoint-CB1GAuK3.js";import"./Cyclical-BY9qISY1.js";import"./jsxFactory-BxQYPm-b.js";import"./GraphicsCollection-CKieR40M.js";import"./boundedPlane-CLJ-Xnn_.js";import"./ObjectStack-BPo9QGhV.js";import"./mat4f64-Dk4dwAN8.js";import"./lineSegment-DVvvMBnG.js";import"./plane-Du3EYICn.js";import"./mat3f64-BBpwCtoL.js";import"./quatf64-BrpT0VRp.js";import"./vec2f64-Diu2Kaa8.js";import"./mathUtils-iSLnUy_4.js";import"./sphere-Bf4ezJdT.js";import"./RenderCoordsHelper-zH8WjGkC.js";import"./spatialReferenceEllipsoidUtils-CmEPjh7T.js";import"./projectVectorToPoint-CPW7kXva.js";import"./ElevationProvider-Bd4qfXCi.js";import"./ViewingMode-Dodu7ZZk.js";import"./verticalOffsetUtils-BYv4Nk2v.js";import"./mat3-CqxUQBLP.js";import"./orientedBoundingBox-BQvYwCTM.js";import"./quat-DUnoL8dP.js";import"./computeTranslationToOriginAndRotation-BbJd4iYX.js";import"./Attribute-B-NAci_J.js";import"./scaleUtils-0K_Ry6I1.js";import"./DefaultUI-DIlogOoy.js";import"./UpdatingHandles-ugzlsvZF.js";import"./screenUtils-BuM_Fswi.js";import"./signal-DoM1gSF0.js";import"./ReactiveMap-C-O0lKvJ.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./mat2d-D9yIh3Tx.js";import"./mat2df32-orApM5a3.js";import"./mat2df64-CBKYtunK.js";import"./vec2-Dt9Foiri.js";import"./vec2f32-BbH2jxlN.js";import"./normalizeUtils-Cm7zySIZ.js";import"./normalizeUtilsCommon-DRIluWnF.js";import"./utils-1zmckiYC.js";import"./utils-D-bI9C7C.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-DfZw-NIf.js";import"./accessibleHandler-DsewpcQ5.js";import"./Compass-C-feYp_a.js";import"./utils-DsJqvptN.js";import"./GoTo-BzS22eXk.js";import"./NavigationToggle-QjJqvxo5.js";import"./Zoom-Ct1er6X1.js";import"./viewpointUtils-BxfIO3H-.js";import"./frustum-BrAPXuhm.js";import"./earthUtils-ir2LnhMw.js";import"./spatialReferenceSupport-DPLkW2jK.js";import"./ElevationSamplerData-CC_B5wrl.js";import"./terrainUtils-hfv3Mblf.js";import"./Util-B8vYs4k8.js";import"./Scheduler-DaHJO6l7.js";import"./debugFlags-BbJIqrPU.js";import"./RenderState-DaVlEYWY.js";import"./TileInfo-BsGWbS2H.js";import"./TileKey-DZd6gJy7.js";import"./Environment-B2HYg6Z1.js";import"./weather-D00pIeau.js";import"./projectPointToWGS84ComparableLonLat-D5kdMIn_.js";import"./projectVectorToWGS84ComparableLonLat-DuPw0-Mv.js";import"./interfaces-B8ge7Jg9.js";import"./Texture-C7A05GrI.js";import"./BindType-BmZEZMMh.js";import"./enums-DSseSvdG.js";import"./Texture-O7Pyotwx.js";import"./VertexAttribute-BnAa5VW0.js";import"./basicInterfaces-DngWxyLO.js";import"./ShaderTechniqueConfiguration-D3UbJ2mX.js";import"./doublePrecisionUtils-B0owpBza.js";import"./Material-DwPnlQDw.js";import"./ContentObject-BTgEhnct.js";import"./requestImageUtils-DP1V3HlH.js";import"./OrderIndependentTransparency-Cua2R8AE.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./RenderGeometry-rcUvJmRA.js";import"./vec3f32-Cw9Q6TO_.js";import"./DoubleArray-068mylUp.js";import"./Indices-DP3oX5Sg.js";import"./Geometry-CqGtfd4N.js";import"./triangle-CTblFuF6.js";import"./hydratedFeatures-DqrDm0_F.js";import"./axisAngleDegrees-CaSFQR2z.js";import"./NestedMap-DgiGbX8E.js";import"./Octree-E7a40xr7.js";import"./InterleavedLayout-s3MgOYN8.js";import"./BufferView-CHYzaV9A.js";import"./types-D0PSWh4d.js";import"./floatRGBA-CCqnXShd.js";import"./Intersector-8rpRuT_8.js";import"./glUtil-DS73TAjp.js";import"./VertexArrayObject-Cv4RwmVi.js";import"./BufferObject-CaEbWulZ.js";import"./Program-BB52p2Mx.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./ShadowCastVisualizeTechniqueConfiguration-DqJ__9Ii.js";import"./ray-CCzLdiTI.js";import"./objectResourceUtils-D-wPKn4W.js";import"./devEnvironmentUtils-Blrp8lZ5.js";import"./vec3-DPXcG_yS.js";import"./DefaultMaterial_COLOR_GAMMA-D4SZcGoz.js";import"./resourceUtils-ayGD6aG4.js";import"./VertexColor.glsl-CScvx9pF.js";import"./symbolColorUtils-B_k_VgHH.js";import"./ZoomMomentumEstimator-PITOvV-p.js";import"./ColorMaterial.glsl-uPKQoFFi.js";import"./labelFormatUtils-BN4HkzS9.js";import"./FeatureTileDescriptor3D-BLJXkD6Q.js";import"./elevationInfoUtils-sHEwmo9N.js";import"./ElevationQueryTileCache-CV2Fph_A.js";import"./LayerConstants-B33OP6sh.js";import"./Intersector-CTjLkyei.js";import"./ElevationRange-BrgM1moX.js";import"./geometryServiceUtils-B-h5lvUN.js";import"./project-7u3NBcq6.js";import"./hitTestSelectUtils-UXJPjatw.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./LercDecoder-FUH0zkya.js";import"./WorkerHandle-DKpIZ9kk.js";import"./RenderableTile-CQN7Nxvi.js";import"./enums-BRzLM11V.js";import"./TileStrategy-BMTAwxMt.js";import"./TileKey-Drwp1tmy.js";import"./QueueProcessor-DFkcFyJt.js";import"./GeometryUtils-_MjrRDxY.js";import"./config-MDUrh2eL.js";import"./DefaultVertexAttributeLayouts-Co_GH1pH.js";import"./DisplayObject-B9oc5ibO.js";import"./Normals-BAXqRpCA.js";import"./rasterUtils-DImlUReg.js";import"./StyleDefinition-pu9RBNlY.js";import"./enums-BRqP_wXA.js";import"./resources-DJFXXcdR.js";import"./edgeProcessing-Crq4tMpw.js";import"./deduplicate-j8p9VETP.js";import"./edgeUtils-D8J_3GIe.js";import"./EdgeWorkerHandle-CAkTfCpv.js";import"./workerHelper-CE2O_zfa.js";import"./testSVGPremultipliedAlpha-Dsq4J0WV.js";import"./RenderingContext-CzjLpUzJ.js";import"./ProgramCache-DX9Ty2iR.js";import"./imageUtils-D1MsbWS6.js";import"./dehydratedFeatures-Cp-_lWz0.js";import"./featureConversionUtils-BzfH5fda.js";import"./OptimizedFeature-CXeSoBCN.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./OptimizedGeometry-DLPswkPy.js";import"./earcut-BqgeR2O3.js";import"./SnappingCandidate-O5eRSE6e.js";import"./triangulationUtils-C0V38kt7.js";import"./CIMSymbolHelper-C-U_lWVp.js";import"./BidiEngine-DL33fnW5.js";import"./fontUtils-Dz0hN_7q.js";import"./definitions-B54owTRu.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BhuXqU4L.js";import"./cimSymbolUtils-DwzauUMk.js";import"./utils-j-RBNfeR.js";import"./lineStippleUtils-B9K4R8oO.js";import"./MeshComponent-BCGFLGQh.js";import"./meshVertexSpaceUtils-KRc33Yrq.js";import"./MeshLocalVertexSpace-C8ABjEju.js";import"./georeference-CwPKO8dc.js";import"./interfaces-DkjgzG8v.js";import"./DefaultLayouts-BrmJbx_o.js";import"./webStyleSymbolUtils-BzDS5WjL.js";import"./popupUtils-BHYiW8I-.js";var r;(function(e){e[e.API=1]="API",e[e.VerboseAPI=2]="VerboseAPI",e[e.Error=3]="Error"})(r||(r={}));const p=f(),g=f();let h=class extends R(F(C)){constructor(){super(...arguments),this._suspendedHandle=null,this._usedMemory=0,this._futureMemory=0,this.type="voxel-3d",this.slicePlaneEnabled=!1,this._wasmLayerId=-1,this.ignoresMemoryFactor=!0,this._dbgFlags=new Set}get baseUrl(){var e;return((e=this.layer.parsedUrl)==null?void 0:e.path)??""}get wasmLayerId(){return this._wasmLayerId}initialize(){var d;if(this._dbgFlags.add(r.Error),this.view.viewingMode!=="local")throw new u("voxel:unsupported-viewingMode","Voxel layers support local viewingMode only.",{});if(!((d=this.view._stage.renderView.renderingContext.capabilities.colorBufferFloat)!=null&&d.textureFloat))throw new u("voxel:missing-color-buffer-float","Voxel layers require the WebGL2 extension EXT_color_buffer_float",{});const e=this.layer.spatialReference;if(!T(e,this.view.spatialReference))throw new u("layerview:spatial-reference-incompatible","The spatial reference of this scene layer is incompatible with the spatial reference of the view",{});const t=this.layer.currentVariableId,s=this.layer.getVolume(t),a=this.layer.getVariable(t);if(s!=null&&a!=null){const n=s.dimensions[0],i=s.dimensions[1],c=s.zDimension;if(c>1){const v=s.dimensions[c],W=n.size*i.size*v.size;let _=1;switch(a.renderingFormat.type){case"Int16":case"UInt16":_=2;break;case"Int32":case"UInt32":case"Float32":_=4}this._futureMemory=_*W}}const m=$(this).then(n=>{this._wasmLayerId=n,this._suspendedHandle=l(()=>this.suspended,i=>{const c=o(this.view);c&&c.setEnabled(this,!i)},y),this.addHandles([l(()=>this.layer.renderMode,i=>this._pushRenderModeToWasm(i)),l(()=>this.layer.currentVariableId,i=>this._pushCurrentVariableIdToWasm(i)),l(()=>this.layer.getSections(),i=>this._pushSectionsToWasm(i)),l(()=>this.layer.getVariableStyles(),i=>this._pushVariableStylesToWasm(i)),l(()=>this.layer.getVolumeStyles(),i=>this._pushVolumeStylesToWasm(i)),l(()=>this.layer.enableDynamicSections,i=>this._pushEnableDynamicSectionsToWasm(i)),l(()=>this.layer.enableIsosurfaces,i=>this._pushEnableIsosurfacesToWasm(i)),l(()=>this.layer.enableSections,i=>this._pushEnableSectionsToWasm(i)),l(()=>this.layer.enableSlices,i=>this._pushEnableSlicesToWasm(i)),l(()=>this.slicePlaneEnabled,i=>this._pushAnalysisSliceToWasm(i,this.view.slicePlane)),l(()=>this.view.slicePlane,i=>this._pushAnalysisSliceToWasm(this.slicePlaneEnabled,i)),l(()=>this.layer.minScale,i=>this._onScaleUpdated(this.view.scale,i,this.layer.maxScale),y),l(()=>this.layer.maxScale,i=>this._onScaleUpdated(this.view.scale,this.layer.minScale,i),y),l(()=>this.view.scale,i=>this._onScaleUpdated(i,this.layer.minScale,this.layer.maxScale),y)])}).catch(n=>{if(V(this),this._wasmLayerId=-1,n===-1)throw new u("voxel:addLayer-failure","The voxel layer description was invalid.",{});if(n===-2)throw new u("voxel:addLayer-failure","The voxel layer web assembly module failed to download.",{})});this.addResolvingPromise(m)}destroy(){V(this),this._suspendedHandle&&(this._suspendedHandle.remove(),this._suspendedHandle=null)}isUpdating(){const e=o(this.view);return!(this._wasmLayerId<0||e==null)&&e.isUpdating(this._wasmLayerId)}updatingFlagChanged(){this.notifyChange("updating")}get usedMemory(){return this._usedMemory}get unloadedMemory(){return this._futureMemory}get performanceInfo(){return new U(this.usedMemory)}whenGraphicBounds(e,t){const s=e.attributes["Voxel.WorldPosition"];if(s){const a=x(),m=JSON.parse(s);if(P(m,this.view.renderSpatialReference,g,this.view.spatialReference||E.WGS84))return I(a,g),Promise.resolve({boundingBox:a,screenSpaceObjects:[]})}return Promise.reject()}setUsedMemory(e){this._usedMemory=e,this._futureMemory=0}captureFrustum(){const e=o(this.view);e==null||e.captureFrustum()}toggleFullVolumeExtentDraw(){const e=o(this.view);e==null||e.toggleFullVolumeExtentDraw(this)}getLayerTimes(){const e=o(this.view);return(e==null?void 0:e.getLayerTimes(this))??[]}getCurrentLayerTimeIndex(){const e=o(this.view);return(e==null?void 0:e.getCurrentLayerTimeIndex(this))??0}_pushRenderModeToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushRenderModeToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setRenderMode(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushRenderModeToWasm() failed!")}_pushSectionsToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setStaticSections(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushSectionsToWasm() failed!")}_pushCurrentVariableIdToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushCurrentVariableIdToWasm() called!, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setCurrentVariable(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushCurrentVariableIdToWasm() failed!")}_pushVariableStylesToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushVariableStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setVariableStyles(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushVariableStylesToWasm() failed!")}_accountForEnableSlices(e,t){const s=t??this.layer.enableSlices;for(let a=0;a<e.length;++a){const m=e[a];for(const d of m.slices)d.enabled=d.enabled&&s}}_pushVolumeStylesToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushVolumeStylesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t&&(this._accountForEnableSlices(e,null),t.setVolumeStyles(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushVolumeStylesToWasm() failed!"))}_pushAnalysisSliceToWasm(e,t){const s=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushAnalysisSliceToWasm() called, "+(s?"have WASM":"don't have WASM!!!"));let a=!1;if(s){if(t){const m=t.origin;A(p,t.basis1,t.basis2),M(p,p),a=s.setAnalysisSlice(this,e,m,p)}else L(p,0,0,1),a=s.setAnalysisSlice(this,!1,p,p);a||this._dbg(r.Error,"VoxelLayerView3D._pushAnalysisSliceToWasm() failed!")}}_pushEnableDynamicSectionsToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableDynamicSections(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableDynamicSectionsToWasm() failed!")}_pushEnableSlicesToWasm(e){const t=o(this.view);if(this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableSlicesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t){const s=this.layer.getVolumeStyles();this._accountForEnableSlices(s,e),t.setVolumeStyles(this,s)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableSlicesToWasm() failed!")}}_pushEnableIsosurfacesToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableIsosurfaces(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableIsosurfacesToWasm() failed!")}_pushEnableSectionsToWasm(e){const t=o(this.view);this._dbg(r.VerboseAPI,"VoxelLayerView3D._pushEnableSectionsToWasm() called, "+(t?"have WASM":"don't have WASM!!!")),t!=null&&t.setEnableSections(this,e)||this._dbg(r.Error,"VoxelLayerView3D._pushEnableSectionsToWasm() failed!")}_onScaleUpdated(e,t,s){const a=z(e,t,s),m=o(this.view);m&&m.setIsInScaleRange(this,a)}async whenGraphicAttributes(e,t){return e}_dbg(e,t){this._dbgFlags.has(e)&&(e===r.Error?w.getLogger(this).error(t):w.getLogger(this).warn(t))}};b([S()],h.prototype,"layer",void 0),b([S()],h.prototype,"baseUrl",null),b([S({type:Boolean})],h.prototype,"slicePlaneEnabled",void 0),h=b([D("esri.views.3d.layers.VoxelLayerView3D")],h);const lr=h;export{lr as default};
