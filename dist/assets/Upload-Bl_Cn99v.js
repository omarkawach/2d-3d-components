import{bO as m,cB as g,a0 as p,Z as v,s as _,o as r,y as i,X as T,ag as k,hl as w}from"./index-8ERthB3p.js";import{i as F,e as $,h as b}from"./progressUtils-DVjrhSUb.js";import{o as x}from"./infoFor3D-CxOdoily.js";let o=class extends m{constructor(){super({}),this.files=[],this.progress=0,this._uploadTask=null,this._layer=null}destroy(){this.cancel(),this.files=[],this._layer=null,this._uploadTask=null}get state(){const e=this._uploadTask;return e&&this.files.length!==0?e.finished?e.error?"error":"success":"pending":"default"}get result(){var e;return((e=this._uploadTask)==null?void 0:e.value)??null}get error(){var e;return((e=this._uploadTask)==null?void 0:e.error)??null}uploadTo(e){this.cancel(),this.files=[],this._layer=e,this._uploadTask=g(async s=>{const a=await E(e);p(s),this.progress=0,this.files=a;const t=F($.upload,c=>{this.progress=c},"Upload.uploadTo");if(a.length===0)return null;p(s);const l=await e.extractAndFilterFiles(a);p(s),l.length>0&&(this.files=l);const d=new v({x:0,y:0,z:0,spatialReference:e.spatialReference}),u=await e.convertMesh(l,{location:d,signal:s,onProgress:t.makeOnProgress("createFromFiles")});if(p(s),!u)throw new _("editor:upload","could not upload or convert model");const h=l.reduce((c,y)=>c+y.size,0),f=t.simulate("loadMesh",b(h));try{await u.load()}finally{f.remove()}return u})}retry(){this._layer&&this.uploadTo(this._layer)}cancel(){var e;(e=this._uploadTask)==null||e.abort()}};r([i()],o.prototype,"files",void 0),r([i()],o.prototype,"progress",void 0),r([i()],o.prototype,"state",null),r([i()],o.prototype,"result",null),r([i()],o.prototype,"error",null),r([i()],o.prototype,"_uploadTask",void 0),r([i()],o.prototype,"_layer",void 0),o=r([T("esri.widgets.Editor.Upload")],o);let n=null;async function E(e){const{resolve:s,promise:a}=k(),t=document.createElement("input");t.type="file",t.multiple=!1,t.accept=[...x(e.infoFor3D),".zip"].join(","),t.style.display="none",document.body.appendChild(t);const l=w(t,"change",()=>s(t.files?Array.from(t.files):[]));return n?n(t):t.click(),a.finally(()=>{l.remove(),t.remove()})}function U(e){n=s=>{Promise.resolve().then(()=>e).then(a=>{if(!n)return;const t=new DataTransfer;a.forEach(l=>t.items.add(l)),s.files=t.files,s.dispatchEvent(new Event("change"))})}}function j(){n=null}export{o as Upload,j as clearPromptForFilesStub,U as stubFilePickerToSelect};
