import{ak as h,v as u,cs as c,cr as y,P as f,e_ as g,o as w,X as v}from"./index-8ERthB3p.js";import{m as V}from"./LayerView2D-BSaaWl8y.js";import{u as _}from"./LayerView-DO6TerBv.js";import"./scaleUtils-0K_Ry6I1.js";import"./Container-lXzdRU2v.js";import"./DefaultUI-DIlogOoy.js";import"./jsxFactory-BxQYPm-b.js";import"./UpdatingHandles-ugzlsvZF.js";import"./screenUtils-BuM_Fswi.js";import"./signal-DoM1gSF0.js";import"./GraphicsCollection-CKieR40M.js";import"./ReactiveMap-C-O0lKvJ.js";import"./IViewEvents-Bci6PjlS.js";import"./interfaces-D6pIddIh.js";import"./heightModelInfoUtils-CdtST1Ra.js";import"./ViewingMode-Dodu7ZZk.js";import"./Viewpoint-CB1GAuK3.js";import"./Cyclical-BY9qISY1.js";import"./mat2d-D9yIh3Tx.js";import"./mat2df32-orApM5a3.js";import"./mat2df64-CBKYtunK.js";import"./mat3-CqxUQBLP.js";import"./vec2-Dt9Foiri.js";import"./vec2f32-BbH2jxlN.js";import"./vec2f64-Diu2Kaa8.js";import"./normalizeUtils-Cm7zySIZ.js";import"./normalizeUtilsCommon-DRIluWnF.js";import"./utils-1zmckiYC.js";import"./utils-D-bI9C7C.js";import"./capabilities-C84AMSCg.js";import"./themeUtils-C3zvZbsE.js";import"./globalCss-DfZw-NIf.js";import"./accessibleHandler-DsewpcQ5.js";import"./Compass-C-feYp_a.js";import"./utils-DsJqvptN.js";import"./GoTo-BzS22eXk.js";import"./NavigationToggle-QjJqvxo5.js";import"./Zoom-Ct1er6X1.js";import"./EffectView-C6VBe3AA.js";import"./DisplayObject-B9oc5ibO.js";import"./highlightReasons-LsVPCozu.js";import"./Tile-BZM3wEBG.js";import"./quickselect-D0_cvEX6.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./TileKey-Drwp1tmy.js";import"./definitions-B54owTRu.js";import"./enums-DSseSvdG.js";import"./Texture-O7Pyotwx.js";import"./ClipRect-tFFfZq22.js";const s=Symbol();let d=class extends V(_){constructor(){super(...arguments),this.layerViews=new h,this._debouncedUpdate=u(async()=>{const{layer:e,parent:{footprintLayerView:i}}=this;let a=[];if(i){const p=this._createQuery(),{features:m}=await i.queryFeatures(p);this.suspended||(a=m.map(r=>e.acquireLayer(r)))}this.removeHandles(s),this.addHandles(a,s)})}attach(){this.addAttachHandles([this._updatingHandles.addOnCollectionChange(()=>this.layerViews,()=>this._updateStageChildren(),{initial:!0}),c(()=>{var e;return((e=this.parent.footprintLayerView)==null?void 0:e.dataUpdating)===!1},()=>this._updateLayers()),y(()=>{var e;return[this.layer.maximumVisibleSublayers,this.suspended,(e=this.parent.footprintLayerView)==null?void 0:e.filter]},()=>this._updateLayers())])}detach(){this.container.removeAllChildren(),this.removeHandles(s)}update(e){}moveStart(){}viewChange(){}moveEnd(){}isUpdating(){return this.layerViews.some(e=>e.updating)}_updateStageChildren(){this.container.removeAllChildren(),this.layerViews.forEach((e,i)=>this.container.addChildAt(e.container,i))}_updateLayers(){this.suspended?this.removeHandles(s):this._updatingHandles.addPromise(this._debouncedUpdate().catch(e=>{f.getLogger(this).error(e)}))}_createQuery(){const{parent:{footprintLayerView:e},layer:{maximumVisibleSublayers:i,parent:{itemTypeField:a,itemSourceField:p,objectIdField:m,orderBy:r}}}=this,l=`${a} <> 'Scene Service'`,t=e.createQuery();t.returnGeometry=!1,t.num=i,t.outFields=[m,p],t.where=g(t.where,l);const o=r==null?void 0:r.find(n=>n.field&&!n.valueExpression);return o!=null&&o.field&&(t.orderByFields=[`${o.field} ${o.order==="descending"?"DESC":"ASC"}`]),t}};d=w([v("esri.views.2d.layers.CatalogDynamicGroupLayerView2D")],d);const ge=d;export{ge as default};
