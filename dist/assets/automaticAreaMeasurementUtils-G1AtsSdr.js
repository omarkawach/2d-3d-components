import{U as i,j as h,g}from"./euclideanAreaMeasurementUtils-CIzlnp3G.js";import{fE as q,dg as $,bW as b,T as d}from"./index-8ERthB3p.js";import{a as s}from"./quantityUtils-9zDVxeky.js";import{geodesicArea as y}from"./geometryEngine-MBwx6Ib1.js";import{y as m}from"./geodesicUtils-D1kRRrco.js";import{t as M}from"./geodesicMeasurementUtils-BcTpN3Xi.js";function R({hasZ:r,spatialReference:t,rings:e},o,u=0){const a=q(t);if(a==null)return!1;const p=r?n=>n:n=>$(G,n[0],n[1],u);for(const n of e){const c=[];for(const l of n){const f=[0,0,u];a(p(l),0,f,0),c.push(f)}o.push(c)}return!0}const G=b();function W(r){const{spatialReference:t}=r;return M(t,j,k,x,r)}function j(r){return s(Math.abs(m([r],"square-meters")[0]),"square-meters")}function k(r){try{return s(Math.abs(y(r,"square-meters")),"square-meters")}catch{return null}}function x(r){const t=[];return R(r,t)?s(Math.abs(m([{type:"polygon",rings:t,spatialReference:d.WGS84}],"square-meters")[0]),"square-meters"):null}function A(r,t,e=i()){if(t==="on-the-ground"){const o=W(r);return o??h(r,e)}return g(r,e)}function w(r,t=i()){return A(r,"on-the-ground",t)}export{w as u};
