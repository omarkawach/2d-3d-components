import{o as a,y as n,X as U,j6 as j,j5 as K,cr as $,gl as x,gJ as A,dp as Q,Z as R,a7 as M,e8 as Y,j3 as G,e5 as F,e$ as ee,jW as te,jp as se,jX as ie,e7 as W,an as I,dr as v,T as L,bi as re,dS as z,j7 as ae,P as oe,j8 as S,f$ as ne,dq as le,f_ as me}from"./index-8ERthB3p.js";import{e as D,O as ue,n as V,i as ce}from"./jsxFactory-BxQYPm-b.js";import{e as he}from"./defaultUnit-gjMTMp_C.js";import{g as B,$ as pe,j as de,d as ve,D as ye}from"./unitFormatUtils-3MMEFLJJ.js";import{geodesicDensify as T,planarLength as H,simplify as b,geodesicLength as we,geodesicArea as ge,planarArea as fe}from"./geometryEngine-MBwx6Ib1.js";import{w as C,R as f,v as O,y as k}from"./geodesicUtils-D1kRRrco.js";import E from"./GraphicsLayer-CapLCpoe.js";import{l as _e}from"./Draw-DIaSIzX8.js";import{l as be,x as $e,j as Le,S as Me}from"./InteractiveToolBase-yKkEJSmV.js";import{S as Ae}from"./GraphicManipulator-XLxbfqMV.js";import{p as Se,u as De}from"./MeasurementWidgetContent-BBPWDwmp.js";import{e as N}from"./globalCss-DfZw-NIf.js";import"./getDefaultUnitForView-BEilgbp7.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./Cyclical-BY9qISY1.js";import"./quantityUtils-9zDVxeky.js";import"./geometryEngineBase-Cz__5BKm.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-7yclY7Co.js";import"./GraphicsCollection-CKieR40M.js";import"./projectVectorToVector-C3SBBDgz.js";import"./projectPointToVector-qKp-AJ2b.js";import"./ViewingMode-Dodu7ZZk.js";import"./SnappingVisualizer2D-C_lkvSQ4.js";import"./vec2-Dt9Foiri.js";import"./vec2f64-Diu2Kaa8.js";import"./enums-BRqP_wXA.js";import"./angularMeasurementUtils-CATp35qy.js";import"./plane-Du3EYICn.js";import"./mat3f64-BBpwCtoL.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-BrpT0VRp.js";import"./mathUtils-iSLnUy_4.js";import"./sphere-Bf4ezJdT.js";import"./ObjectStack-BPo9QGhV.js";import"./geometry2dUtils-DoOkpuKA.js";import"./screenUtils-BuM_Fswi.js";import"./signal-DoM1gSF0.js";import"./elevationInfoUtils-sHEwmo9N.js";import"./SnappingVisualizer-DfDIQ0EV.js";import"./PointSnappingHint-DFYGb6IS.js";import"./EditGeometryOperations-3XHFCAp6.js";import"./SnappingContext-Cpn1WUY8.js";import"./SnappingOperation-B1FLBSOP.js";import"./Scheduler-DaHJO6l7.js";import"./debugFlags-BbJIqrPU.js";import"./RenderState-DaVlEYWY.js";import"./surfaceCoordinateSystems-mGV_LGb6.js";import"./memoize-DsJmrG76.js";import"./UpdatingHandles-ugzlsvZF.js";import"./dehydratedFeatureComparison-DdCJ1gSj.js";import"./SketchLabelOptions-BnZB654u.js";import"./SnappingDragPipelineStep-selKU1rW.js";import"./hydratedFeatures-DqrDm0_F.js";import"./mat2d-D9yIh3Tx.js";import"./mat2df64-CBKYtunK.js";import"./quat-DUnoL8dP.js";import"./meshVertexSpaceUtils-KRc33Yrq.js";import"./MeshLocalVertexSpace-C8ABjEju.js";import"./vec3-DPXcG_yS.js";import"./interfaces-DkjgzG8v.js";import"./drawUtils-C6Di23Hl.js";import"./interfaces-D6pIddIh.js";import"./drapedUtils-BdDXXXz6.js";import"./UnitSelect-vwLT4dGV.js";const y=1e5;let w=class extends be{constructor(e){super(e),this._drawActive=!1,this._measurementLayer=new E({internal:!0,listMode:"hide",visible:!1}),this._manipulatorLayer=new E({internal:!0,listMode:"hide",visible:!1}),this._vertices=[],this.geodesicDistanceThreshold=null,this.measurement=null,this.measurementLabel=null}initialize(){j("esri/core/t9n/Units").then(t=>{this.messages=t}),this.addHandles(K(async()=>{this.messages=await j("esri/core/t9n/Units")}));const e=this.view;this._draw=new _e({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer]),e.focus(),this.addHandles([$(()=>[this.unit,this.geodesicDistanceThreshold,this.messages],()=>{this._updateGraphics()},x),$(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const t=this._vertices.map(({coord:i})=>i);for(const{handle:i}of this._vertices)i.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(t)})])}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=A(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=A(this._measurementLayer),this._manipulatorLayer=A(this._manipulatorLayer),this._resetVertices()}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}onActivate(){this._drawActive||this._vertices.length!==0||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1}reset(){this.manipulators.removeAll(),this._resetVertices(),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._draw.reset(),this._drawActive=!1}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const e=this._draw.create("polyline",{mode:"click"});e.on(["vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],t=>this._updateSketch(t.vertices)),e.on("draw-complete",()=>this._stopSketch())}_stopSketch(){if(this._vertices.length<3)return this.reset(),void this._startSketch();this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const t=this.view.spatialReference;if(t&&(!P(t)||Q())){for(;this._vertices.length>e.length;){const{handle:i,manipulator:r}=this._vertices.pop();i.remove(),this.manipulators.remove(r)}for(let i=this._vertices.length;i<e.length;i++){const[r,m]=e[i],l=Te(new R({x:r,y:m,spatialReference:t}),this.view,this._manipulatorLayer);this.manipulators.add(l);const u=$e(l,(o,s)=>{s.next(Le(this.view)).next(Me(o.graphic)).next(()=>{const c=o.graphic.geometry;this._vertices[i].coord=[c.x,c.y],this._updateGraphics()})});this._vertices.push({manipulator:l,coord:[r,m],handle:u})}if(this._vertices.length){const i=this._vertices.length-1,r=this._vertices[i],[m,l]=e[i];r.coord[0]===m&&r.coord[1]===l||(r.coord=[m,l],r.manipulator.graphic.geometry=new R({x:m,y:l,spatialReference:t}));const u=this._drawActive?this._vertices[i].manipulator:null;this.manipulators.forEach(({manipulator:o})=>{o.interactive=u==null||o!==u})}this._updateGraphics()}}_updateGraphics(){if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=Oe(this._vertices.map(({coord:d})=>d),this.view.spatialReference,this.geodesicDistanceThreshold);if(!e)return;const{measurement:t,fillGeometry:i,outlineGeometry:r}=e;this._set("measurement",t);const m=t?qe(this.messages,t,this.unit):null;if(this._set("measurementLabel",m),!i&&!r)return;let l,u,o;const{graphics:s}=this._measurementLayer,c=s.length===3,{effectiveTheme:h}=this.view;c?(l=s.at(0),u=s.at(1),o=s.at(2)):(l=new M({symbol:new Y({color:G(h.accentColor,.3),outline:null})}),u=new M({symbol:new F({color:h.accentColor,width:2})}),o=new M({symbol:new ee({color:h.textColor,font:new te({size:14,family:"sans-serif"}),haloColor:G(se(h.textColor,ie.Low),.5),haloSize:2})}),s.removeAll(),s.addMany([l,u,o])),l.geometry=i,u.geometry=r,o.geometry=i==null?void 0:i.centroid,o.symbol.text=(m==null?void 0:m.area)??""}};function Te(e,t,i){const m={style:"circle",color:G(t.effectiveTheme.accentColor,.5),outline:{type:"simple-line",width:0}},l=new W({...m,size:8}),u=new W({...m,size:1.5*8}),o=new M({geometry:e,symbol:l});return new Ae({view:t,layer:i,graphic:o,focusedSymbol:u})}function Oe(e,t,i){if(e.length===2){const c=new I({paths:e,spatialReference:t});let h;if(t!=null&&t.isGeographic)if(C(t))h=f(c,y);else{const d=v(c,L.WGS84),_=f(d,y);h=v(_,t)}else if(t!=null&&t.isWebMercator)h=T(c,y,"meters");else if(H(c,"meters")>=X(i)){const d=v(c,L.WGS84),_=f(d,y);h=v(_,t)}else h=c;return{measurement:null,fillGeometry:null,outlineGeometry:h}}e.push(e[0]);const r=new I({paths:[e],spatialReference:t}),m=new re({rings:[e],spatialReference:t});let l,u,o=null,s=null;if(t!=null&&t.isGeographic)if(C(t)){if(o=f(r,y),s=f(m,y),s=b(s),!s)return null;l=O([r],"meters")[0],u=k([s],"square-meters")[0]}else{const c=L.WGS84,h=v(r,c),d=v(m,c);if(o=f(h,y),s=f(d,y),s=b(s),!s)return null;l=O([h],"meters")[0],u=k([s],"square-meters")[0],o=v(o,t),s=v(s,t)}else if(t!=null&&t.isWebMercator){if(o=T(r,y,"meters"),s=T(m,y,"meters"),s=b(s),!s)return null;l=we(r,"meters"),u=ge(s,"square-meters")}else{const c=H(r,"meters");if(c>=X(i)){const h=L.WGS84,d=v(r,h),_=v(m,h);if(o=f(d,y),s=f(_,y),s=b(s),!s)return null;l=O([d],"meters")[0],u=k([s],"square-meters")[0],o=v(o,t),s=v(s,t)}else{if(o=r,s=b(m),!s)return null;l=c,u=fe(s,"square-meters")}}return{measurement:{geometry:s,area:u,perimeter:l},fillGeometry:s,outlineGeometry:o}}function ke(e){return e!=null}function P(e){if(!e)return!1;const{isGeographic:t,isWebMercator:i,isWGS84:r}=e;return t&&!r&&!C(e)||!t&&!i}function qe(e,t,i){if(!t||!e)return null;const r={area:null,perimeter:null},{area:m,perimeter:l}=t;switch(i){case"metric":r.area=de(e,m,"square-meters");break;case"imperial":r.area=pe(e,m,"square-meters");break;default:{const o=z(m,"square-meters",i);r.area=B(e,o,i);break}}const u=xe(i);if(u)switch(u){case"metric":r.perimeter=ye(e,l,"meters");break;case"imperial":r.perimeter=ve(e,l,"meters");break;default:{const o=z(l,"meters",u);r.perimeter=B(e,o,u);break}}else r.perimeter="";return r}function xe(e){switch(e){case"metric":case"ares":case"hectares":return"metric";case"imperial":case"acres":return"imperial";case"square-inches":return"inches";case"square-feet":return"feet";case"square-yards":return"yards";case"square-miles":return"miles";case"square-us-feet":return"us-feet";case"square-meters":return"meters";case"square-kilometers":return"kilometers";case"square-millimeters":return"millimeters";case"square-centimeters":return"centimeters";case"square-decimeters":return"decimeters";default:return null}}function X(e){return e??1/0}a([n()],w.prototype,"_drawActive",void 0),a([n({readOnly:!0})],w.prototype,"cursor",null),a([n({value:!0})],w.prototype,"editable",null),a([n({type:Number})],w.prototype,"geodesicDistanceThreshold",void 0),a([n({readOnly:!0})],w.prototype,"measurement",void 0),a([n({readOnly:!0})],w.prototype,"measurementLabel",void 0),a([n()],w.prototype,"messages",void 0),a([n()],w.prototype,"unit",void 0),a([n({constructOnly:!0})],w.prototype,"view",void 0),w=a([U("esri.widgets.AreaMeasurement2D.AreaMeasurement2DTool")],w);let g=class extends Se{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="AreaMeasurement2DViewModel is only supported in 2D views."}initialize(){this.addHandles([$(()=>{var e;return(e=this.view)==null?void 0:e.spatialReference},()=>this.clear()),$(()=>this.unit,e=>{this.tool!=null&&(this.tool.unit=e)},x),$(()=>this.geodesicDistanceThreshold,e=>{this.tool!=null&&(this.tool.geodesicDistanceThreshold=e)},x)])}get geodesicDistanceThreshold(){return this._get("geodesicDistanceThreshold")}set geodesicDistanceThreshold(e){ae(oe.getLogger(this),"geodesicDistanceThreshold",{version:"4.29",warnOnce:!0}),this._set("geodesicDistanceThreshold",e)}get measurement(){return this.tool!=null?this.tool.measurement:null}get measurementLabel(){return this.tool!=null?this.tool.measurementLabel:null}get state(){var e;return this.disabled||this.view==null||!ke(this.view.spatialReference)?"disabled":(e=this.tool)!=null&&e.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return S}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;e!=null&&(await ne(()=>e.ready),P(e.spatialReference)&&await le()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new w({view:this.view,visible:this.visible,geodesicDistanceThreshold:this.geodesicDistanceThreshold,unit:this.unit})}_validateUnit(e){const{unitOptions:t,defaultUnit:i}=this;return e!=null&&t.includes(e)?e:t.includes(i)?i:t.length>0?t[0]:i}_validateUnits(e){if(e==null)return[];const t=e.filter(i=>S.includes(i));return t.length===0?S.slice():t}};a([n(he)],g.prototype,"defaultUnit",void 0),a([n()],g.prototype,"geodesicDistanceThreshold",null),a([n({readOnly:!0})],g.prototype,"measurement",null),a([n({readOnly:!0})],g.prototype,"measurementLabel",null),a([n({readOnly:!0})],g.prototype,"state",null),a([n({type:String})],g.prototype,"unit",null),a([n({type:[String]})],g.prototype,"unitOptions",null),g=a([U("esri.widgets.AreaMeasurement2D.AreaMeasurement2DViewModel")],g);const Z=g,J="esri-area-measurement-2d",q={base:J,newMeasurementButton:`${J}__clear-button`,widgetIcon:ce.measureArea};let p=class extends ue{constructor(e,t){super(e,t),this.iconClass=q.widgetIcon,this.icon=null,this.messages=null,this.messagesUnits=null,this.messagesCommon=null,this.viewModel=new Z}get active(){return this.viewModel.active}get label(){var e;return((e=this.messages)==null?void 0:e.widgetLabel)??""}set label(e){this._overrideIfSome("label",e)}get unit(){return this.viewModel.unit}set unit(e){this.viewModel.unit=e}get unitOptions(){return this.viewModel.unitOptions}set unitOptions(e){this.viewModel.unitOptions=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}get visible(){return this.viewModel.visible}set visible(e){this.viewModel.visible=e}render(){const{messages:e,messagesCommon:t,messagesUnits:i,unit:r,unitOptions:m,viewModel:l,visible:u}=this,{active:o,measurementLabel:s,state:c,supported:h}=l;return V("div",{"aria-label":e.widgetLabel,class:this.classes(q.base,N.widget,N.panel),key:this,role:"presentation"},u?V(De,{active:o,measurementItems:[{key:"area",title:i==null?void 0:i.measures.area,value:s==null?void 0:s.area},{key:"perimeter",title:e.perimeter,value:s==null?void 0:s.perimeter}],messages:{...e,notApplicable:t.notApplicable},newMeasurementButtonClass:q.newMeasurementButton,state:c,supported:h,unit:r,unitOptions:m,onNewMeasurementClick:()=>{me(l.start())},onUnitChange:d=>{this.unit=d}}):null)}};a([n({readOnly:!0})],p.prototype,"active",null),a([n()],p.prototype,"iconClass",void 0),a([n()],p.prototype,"icon",void 0),a([n()],p.prototype,"label",null),a([n(),D("esri/widgets/AreaMeasurement2D/t9n/AreaMeasurement2D")],p.prototype,"messages",void 0),a([n(),D("esri/core/t9n/Units")],p.prototype,"messagesUnits",void 0),a([n(),D("esri/t9n/common")],p.prototype,"messagesCommon",void 0),a([n()],p.prototype,"uiStrings",void 0),a([n()],p.prototype,"unit",null),a([n()],p.prototype,"unitOptions",null),a([n()],p.prototype,"view",null),a([n({type:Z})],p.prototype,"viewModel",void 0),a([n({type:Boolean})],p.prototype,"visible",null),p=a([U("esri.widgets.AreaMeasurement2D")],p);const Et=p;export{Et as default};
