import{s as d,dG as q,dr as D,hw as j,av as b,ds as I,hi as E,O as L,bG as W,hx as Q,bj as R,an as B,Z as O,hy as V}from"./index-8ERthB3p.js";import{t as H,u as k}from"./ElevationSamplerData-CC_B5wrl.js";import{t as Z}from"./TileKey-DZd6gJy7.js";class G{constructor(e,t=null){if(this.tile=e,t!=null&&e!=null){const i=e.extent;this._samplerData=new H(t,i)}}get zmin(){return this._samplerData!=null?this._samplerData.data.minValue:0}get zmax(){return this._samplerData!=null?this._samplerData.data.maxValue:0}get hasNoDataValues(){var e;return!!((e=this._samplerData)!=null&&e.data.hasNoDataValues)}sample(e,t){if(this._samplerData==null)return;const{safeWidth:i,data:l,dx:s,dy:n,y1:o,x0:a}=this._samplerData,{width:r,values:c,noDataValue:m}=l,p=N(n*(o-t),0,i),u=N(s*(e-a),0,i),T=Math.floor(p),C=Math.floor(u),x=T*r+C,F=x+r,g=c[x],_=c[F],M=c[x+1],S=c[F+1];if(g!==m&&_!==m&&M!==m&&S!==m){const z=u-C,$=g+(M-g)*z;return $+(_+(S-_)*z-$)*(p-T)}}}function N(h,e,t){return h<e?e:h>t?t:h}class te{async queryAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(r=>r.visible):e.slice()).length)throw new d("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");const l=y.fromGeometry(t);let s=!1;i&&i.returnSampleInfo||(s=!0);const n={...w,...i,returnSampleInfo:!0},o=await this.query(e[e.length-1],l,n),a=await this._queryAllContinue(e,o,n);return a.geometry=a.geometry.export(),s&&delete a.sampleInfo,a}async query(e,t,i){if(!e)throw new d("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||!(t instanceof y)&&t.type!=="point"&&t.type!=="multipoint"&&t.type!=="polyline")throw new d("elevation-query:invalid-geometry","Only point, polyline and multipoint geometries can be used to query elevation");const l={...w,...i},s=new J(e,t.spatialReference,l),n=l.signal;return await e.load({signal:n}),await this._createGeometryDescriptor(s,t,n),await this._selectTiles(s,n),await this._populateElevationTiles(s,n),this._sampleGeometryWithElevation(s),this._createQueryResult(s,n)}async createSampler(e,t,i){if(!e)throw new d("elevation-query:invalid-layer","Elevation queries require an elevation layer to fetch tiles from");if(!t||t.type!=="extent")throw new d("elevation-query:invalid-extent","Invalid or undefined extent");const l={...w,...i};return this._createSampler(e,t,l)}async createSamplerAll(e,t,i){if(!(e=i&&i.ignoreInvisibleLayers?e.filter(n=>n.visible):e.slice()).length)throw new d("elevation-query:invalid-layer","Elevation queries require at least one elevation layer to fetch tiles from");if(!t||t.type!=="extent")throw new d("elevation-query:invalid-extent","Invalid or undefined extent");const l={...w,...i,returnSampleInfo:!0},s=await this._createSampler(e[e.length-1],t,l);return this._createSamplerAllContinue(e,t,s,l)}async _createSampler(e,t,i,l){const s=i.signal;await e.load({signal:s});const n=t.spatialReference,o=e.tileInfo.spatialReference;n.equals(o)||(await q([{source:n,dest:o}],{signal:s}),t=D(t,o));const a=new K(e,t,i,l);return await this._selectTiles(a,s),await this._populateElevationTiles(a,s),new k(a.elevationTiles,a.layer.tileInfo,a.options.noDataValue)}async _createSamplerAllContinue(e,t,i,l){if(e.pop(),!e.length)return i;const s=i.samplers.filter(r=>!r.tile.hasNoDataValues).map(r=>j(r.extent)),n=await this._createSampler(e[e.length-1],t,l,s);if(n.samplers.length===0)return i;const o=i.samplers.concat(n.samplers),a=new k(o,l.noDataValue);return this._createSamplerAllContinue(e,t,a,l)}async _queryAllContinue(e,t,i){const l=e.pop(),s=t.geometry.coordinates,n=t.sampleInfo;b(n);const o=[],a=[];for(let p=0;p<s.length;p++){const u=n[p];u.demResolution>=0?u.source||(u.source=l):e.length&&(o.push(s[p]),a.push(p))}if(!e.length||o.length===0)return t;const r=t.geometry.clone(o),c=await this.query(e[e.length-1],r,i),m=c.sampleInfo;if(!m)throw new Error("no sampleInfo");return a.forEach((p,u)=>{s[p].z=c.geometry.coordinates[u].z,n[p].demResolution=m[u].demResolution}),this._queryAllContinue(e,t,i)}async _createQueryResult(e,t){const i=await e.geometry.project(e.outSpatialReference,t);b(i);const l={geometry:i.export(),noDataValue:e.options.noDataValue};return e.options.returnSampleInfo&&(l.sampleInfo=this._extractSampleInfo(e)),e.geometry.coordinates.forEach(s=>{s.tile=null,s.elevationTile=null}),l}async _createGeometryDescriptor(e,t,i){let l;const s=e.layer.tileInfo.spatialReference;if(t instanceof y?l=await t.project(s,i):(await q([{source:t.spatialReference,dest:s}],{signal:i}),l=D(t,s)),!l)throw new d("elevation-query:spatial-reference-mismatch",`Cannot query elevation in '${t.spatialReference.wkid}' on an elevation service in '${s.wkid}'`);e.geometry=y.fromGeometry(l)}async _selectTiles(e,t){e.type==="geometry"&&this._preselectOutsideLayerExtent(e);const i=e.options.demResolution;if(typeof i=="number")this._selectTilesClosestResolution(e,i);else if(i==="finest-contiguous")await this._selectTilesFinestContiguous(e,t);else{if(i!=="auto")throw new d("elevation-query:invalid-dem-resolution",`Invalid dem resolution value '${i}', expected a number, "finest-contiguous" or "auto"`);await this._selectTilesAuto(e,t)}}_preselectOutsideLayerExtent(e){if(e.layer.fullExtent==null)return;const t=new G(null);t.sample=()=>e.options.noDataValue,e.outsideExtentTile=t;const i=e.layer.fullExtent;e.geometry.coordinates.forEach(l=>{const s=l.x,n=l.y;(s<i.xmin||s>i.xmax||n<i.ymin||n>i.ymax)&&(l.elevationTile=t)})}_selectTilesClosestResolution(e,t){const i=this._findNearestDemResolutionLODIndex(e,t);e.selectTilesAtLOD(i)}_findNearestDemResolutionLODIndex(e,t){const{tileInfo:i,tilemapCache:l}=e.layer,s=t/I(i.spatialReference),n=v(i,l);let o=n[0],a=0;for(let r=1;r<n.length;r++){const c=n[r];Math.abs(c.resolution-s)<Math.abs(o.resolution-s)&&(o=c,a=r)}return a}async _selectTilesFinestContiguous(e,t){const{tileInfo:i,tilemapCache:l}=e.layer,s=P(i,l,e.options.minDemResolution);await this._selectTilesFinestContiguousAt(e,s,t)}async _selectTilesFinestContiguousAt(e,t,i){const l=e.layer;if(e.selectTilesAtLOD(t),t<0)return;const s=l.tilemapCache,n=e.getTilesToFetch();try{if(s&&!A(s))await E(Promise.all(n.map(o=>s.fetchAvailability(o.level,o.row,o.col,{signal:i}))),i);else if(await this._populateElevationTiles(e,i),!e.allElevationTilesFetched())throw e.clearElevationTiles(),new d("elevation-query:has-unavailable-tiles")}catch(o){L(o),await this._selectTilesFinestContiguousAt(e,t-1,i)}}async _populateElevationTiles(e,t){const i=e.getTilesToFetch(),l={},s=e.options.cache,n=e.options.noDataValue,o=i.map(async a=>{if(a.id==null)return;const r=`${e.layer.uid}:${a.id}:${n}`,c=s!=null?s.get(r):null,m=c??await e.layer.fetchTile(a.level,a.row,a.col,{noDataValue:n,signal:t});s!=null&&s.put(r,m),l[a.id]=new G(a,m)});await E(Promise.allSettled(o),t),e.populateElevationTiles(l)}async _selectTilesAuto(e,t){this._selectTilesAutoFinest(e),this._reduceTilesForMaximumRequests(e);const i=e.layer.tilemapCache;if(!i||A(i))return this._selectTilesAutoPrefetchUpsample(e,t);const l=e.getTilesToFetch(),s={},n=l.map(async o=>{const a=new Z(null,0,0,0,W()),r=await Q(i.fetchAvailabilityUpsample(o.level,o.row,o.col,a,{signal:t}));r.ok!==!1?o.id!=null&&(s[o.id]=a):L(r.error)});await E(Promise.all(n),t),e.remapTiles(s)}_reduceTilesForMaximumRequests(e){const t=e.layer.tileInfo;let i=0;const l={},s=a=>{a.id!=null&&(a.id in l?l[a.id]++:(l[a.id]=1,i++))},n=a=>{if(a.id==null)return;const r=l[a.id];r===1?(delete l[a.id],i--):l[a.id]=r-1};e.forEachTileToFetch(s,n);let o=!0;for(;o&&(o=!1,e.forEachTileToFetch(a=>{i<=e.options.maximumAutoTileRequests||(n(a),t.upsampleTile(a)&&(o=!0),s(a))},n),o););}_selectTilesAutoFinest(e){const{tileInfo:t,tilemapCache:i}=e.layer,l=P(t,i,e.options.minDemResolution);e.selectTilesAtLOD(l,e.options.maximumAutoTileRequests)}async _selectTilesAutoPrefetchUpsample(e,t){const i=e.layer.tileInfo;await this._populateElevationTiles(e,t);let l=!1;e.forEachTileToFetch((s,n)=>{i.upsampleTile(s)?l=!0:n()}),l&&await this._selectTilesAutoPrefetchUpsample(e,t)}_sampleGeometryWithElevation(e){e.geometry.coordinates.forEach(t=>{const i=t.elevationTile;let l=e.options.noDataValue;if(i){const s=i.sample(t.x,t.y);s!=null?l=s:t.elevationTile=null}t.z=l})}_extractSampleInfo(e){const t=e.layer.tileInfo,i=I(t.spatialReference);return e.geometry.coordinates.map(l=>{let s=-1;return l.elevationTile&&l.elevationTile!==e.outsideExtentTile&&(s=t.lodAt(l.elevationTile.tile.level).resolution*i),{demResolution:s}})}}class y{export(){return this._exporter(this.coordinates,this.spatialReference)}clone(e){const t=new y;return t.geometry=this.geometry,t.spatialReference=this.spatialReference,t.coordinates=e||this.coordinates.map(i=>i.clone()),t._exporter=this._exporter,t}async project(e,t){if(this.spatialReference.equals(e))return this.clone();await q([{source:this.spatialReference,dest:e}],{signal:t});const i=new R({spatialReference:this.spatialReference,points:this.coordinates.map(o=>[o.x,o.y])}),l=D(i,e);if(!l)return null;const s=this.coordinates.map((o,a)=>{const r=o.clone(),c=l.points[a];return r.x=c[0],r.y=c[1],r}),n=this.clone(s);return n.spatialReference=e,n}static fromGeometry(e){const t=new y;if(t.geometry=e,t.spatialReference=e.spatialReference,e instanceof y)t.coordinates=e.coordinates.map(i=>i.clone()),t._exporter=(i,l)=>{const s=e.clone(i);return s.spatialReference=l,s};else switch(e.type){case"point":{const i=e,{hasZ:l,hasM:s}=i;t.coordinates=l&&s?[new f(i.x,i.y,i.z,i.m)]:l?[new f(i.x,i.y,i.z)]:s?[new f(i.x,i.y,null,i.m)]:[new f(i.x,i.y)],t._exporter=(n,o)=>e.hasM?new O(n[0].x,n[0].y,n[0].z,n[0].m,o):new O(n[0].x,n[0].y,n[0].z,o);break}case"multipoint":{const i=e,{hasZ:l,hasM:s}=i;t.coordinates=l&&s?i.points.map(n=>new f(n[0],n[1],n[2],n[3])):l?i.points.map(n=>new f(n[0],n[1],n[2])):s?i.points.map(n=>new f(n[0],n[1],null,n[2])):i.points.map(n=>new f(n[0],n[1])),t._exporter=(n,o)=>e.hasM?new R({points:n.map(a=>[a.x,a.y,a.z,a.m]),hasZ:!0,hasM:!0,spatialReference:o}):new R(n.map(a=>[a.x,a.y,a.z]),o);break}case"polyline":{const i=e,l=[],s=[],{hasZ:n,hasM:o}=e;let a=0;for(const r of i.paths)if(s.push([a,a+r.length]),a+=r.length,n&&o)for(const c of r)l.push(new f(c[0],c[1],c[2],c[3]));else if(n)for(const c of r)l.push(new f(c[0],c[1],c[2]));else if(o)for(const c of r)l.push(new f(c[0],c[1],null,c[2]));else for(const c of r)l.push(new f(c[0],c[1]));t.coordinates=l,t._exporter=(r,c)=>{const m=e.hasM?r.map(u=>[u.x,u.y,u.z,u.m]):r.map(u=>[u.x,u.y,u.z]),p=s.map(u=>m.slice(u[0],u[1]));return new B({paths:p,hasM:e.hasM,hasZ:!0,spatialReference:c})};break}}return t}}class f{constructor(e,t,i=null,l=null,s=null,n=null){this.x=e,this.y=t,this.z=i,this.m=l,this.tile=s,this.elevationTile=n}clone(){return new f(this.x,this.y,this.z,this.m)}}class U{constructor(e,t){this.layer=e,this.options=t}}class J extends U{constructor(e,t,i){super(e,i),this.outSpatialReference=t,this.type="geometry"}selectTilesAtLOD(e){if(e<0)this.geometry.coordinates.forEach(t=>t.tile=null);else{const{tileInfo:t,tilemapCache:i}=this.layer,l=v(t,i)[e].level;this.geometry.coordinates.forEach(s=>s.tile=t.tileAt(l,s.x,s.y))}}allElevationTilesFetched(){return!this.geometry.coordinates.some(e=>!e.elevationTile)}clearElevationTiles(){for(const e of this.geometry.coordinates)e.elevationTile!==this.outsideExtentTile&&(e.elevationTile=null)}populateElevationTiles(e){var t;for(const i of this.geometry.coordinates)!i.elevationTile&&((t=i.tile)!=null&&t.id)&&(i.elevationTile=e[i.tile.id])}remapTiles(e){var t;for(const i of this.geometry.coordinates){const l=(t=i.tile)==null?void 0:t.id;i.tile=l?e[l]:null}}getTilesToFetch(){var i;const e={},t=[];for(const l of this.geometry.coordinates){const s=l.tile;if(!s)continue;const n=(i=l.tile)==null?void 0:i.id;l.elevationTile||!n||e[n]||(e[n]=s,t.push(s))}return t}forEachTileToFetch(e){for(const t of this.geometry.coordinates)t.tile&&!t.elevationTile&&e(t.tile,()=>{t.tile=null})}}class K extends U{constructor(e,t,i,l){super(e,i),this.type="extent",this.elevationTiles=[],this._candidateTiles=[],this._fetchedCandidates=new Set,this.extent=t.clone().intersection(e.fullExtent),this.maskExtents=l}selectTilesAtLOD(e,t){const i=this._maximumLodForRequests(t),l=Math.min(i,e);l<0?this._candidateTiles.length=0:this._selectCandidateTilesCoveringExtentAt(l)}_maximumLodForRequests(e){const{tileInfo:t,tilemapCache:i}=this.layer,l=v(t,i);if(!e)return l.length-1;const s=this.extent;if(s==null)return-1;for(let n=l.length-1;n>=0;n--){const o=l[n],a=o.resolution*t.size[0],r=o.resolution*t.size[1];if(Math.ceil(s.width/a)*Math.ceil(s.height/r)<=e)return n}return-1}allElevationTilesFetched(){return this._candidateTiles.length===this.elevationTiles.length}clearElevationTiles(){this.elevationTiles.length=0,this._fetchedCandidates.clear()}populateElevationTiles(e){for(const t of this._candidateTiles){const i=t.id&&e[t.id];i&&(this._fetchedCandidates.add(t),this.elevationTiles.push(i))}}remapTiles(e){this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles.map(t=>e[t.id]))}getTilesToFetch(){return this._candidateTiles}forEachTileToFetch(e,t){const i=this._candidateTiles;this._candidateTiles=[],i.forEach(l=>{if(this._fetchedCandidates.has(l))return void(t&&t(l));let s=!1;e(l,()=>s=!0),s?t&&t(l):this._candidateTiles.push(l)}),this._candidateTiles=this._uniqueNonOverlappingTiles(this._candidateTiles,t)}_uniqueNonOverlappingTiles(e,t){const i={},l=[];for(const n of e){const o=n.id;o&&!i[o]?(i[o]=n,l.push(n)):t&&t(n)}const s=l.sort((n,o)=>n.level-o.level);return s.filter((n,o)=>{for(let a=0;a<o;a++){const r=s[a].extent;if(r&&n.extent&&V(r,n.extent))return t&&t(n),!1}return!0})}_selectCandidateTilesCoveringExtentAt(e){this._candidateTiles.length=0;const t=this.extent;if(t==null)return;const{tileInfo:i,tilemapCache:l}=this.layer,s=v(i,l)[e],n=i.tileAt(s.level,t.xmin,t.ymin),o=n.extent;if(o==null)return;const a=s.resolution*i.size[0],r=s.resolution*i.size[1],c=Math.ceil((t.xmax-o[0])/a),m=Math.ceil((t.ymax-o[1])/r);for(let p=0;p<m;p++)for(let u=0;u<c;u++){const T=new Z(null,n.level,n.row-p,n.col+u);i.updateTileInfo(T),this._tileIsMasked(T)||this._candidateTiles.push(T)}}_tileIsMasked(e){return!!this.maskExtents&&this.maskExtents.some(t=>e.extent&&V(t,e.extent))}}function P(h,e,t=0){const i=v(h,e);let l=i.length-1;if(t>0){const s=t/I(h.spatialReference),n=i.findIndex(o=>o.resolution<s);n===0?l=0:n>0&&(l=n-1)}return l}const w={maximumAutoTileRequests:20,noDataValue:0,returnSampleInfo:!1,demResolution:"auto",minDemResolution:0};function v(h,e){const t=h.lods;if(A(e)){const{effectiveMinLOD:i,effectiveMaxLOD:l}=e;return t.filter(s=>s.level>=i&&s.level<=l)}return t}function A(h){return(h==null?void 0:h.tileInfo)!=null}export{te as ElevationQuery,y as GeometryDescriptor,P as getFinestLodIndex};
